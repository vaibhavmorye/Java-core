/*****************************************************************************************
* Service       :svc_aadhar_volt.pc                                                      *
*                                                                                                                                                                                                                                                                                                                                                                *
* Description   : This sevice is to support svc_insta_acc.pc to make insert in           *
*                 aadhar data vault                                                      *
*                                                                                        *
* Input         :FML_PRTFLO_ID  UID NO                                                   *
*                FML_PARAM_CC source                                                     *
*                                                                                        *
* Output        : Success/Failure                                                        *
*                                                                                        *
* Author        : 3i-infotech                                                            *
*                                                                                        *
* Version       :1.0 intital version                                                     *
*                                                                1.1 Changes to identify caller page                                     *
*                1.2 bugfix adding trim (vaibhav) 29/12/2017                             *
*                                                        1.3 HSM related development 27-Feb-2018                                                                                             *
*                                                                1.4 Aadhar volt Circular changes (Shoaib) 21-May-2018                                                                   *
*                                                                1.5 storing Aadhaar response in UID database 30-May-2018                *
*****************************************************************************************/

#include <atmi.h>
#include <userlog.h>
#include <fml32.h>
#include <stdlib.h>
#include <string.h>
#include <fml_def.h>
#include <eba.h>
#include <sqlca.h>
#include <fn_read_debug_lvl.h>

#define TOTAL_FML 10
#define ENC_LEN 17
#define DEC_LEN 13

/**** Ver 1.3 ***/
int encryption(char*,char*,int*);
int decryption(char*,char*,int);

varchar c_encrypt_test[ENC_LEN];
/**** Ver 1.3 ***/

void SVC_AADHAR_VOLT(TPSVCINFO * rqst)
{
        int i;
        int i_err_op[TOTAL_FML]; /*Error array */
        int i_ferr[TOTAL_FML]; /*Error array */
        int i_foccur_count;
        int i_enc_len;
        int l_buff_length;
        int l_res_len;

        char c_ServiceName[33];
        char c_errmsg[256];
        char c_msg_typ;
        /** ver 1.5 **/
        char* c_msg_uidai_res = NULL;

        /** ver 1.5 **/
        /* for test */
        varchar c_msgbuff[50];
        /**** Ver 1.3 ****/
        varchar c_plain[ENC_LEN];
        char* c_encrypt;
        varchar v_encrypt_text[ENC_LEN];
        varchar c_decrypt[ENC_LEN];
        short    ind_encrypt_text = 0;
        /**** Ver 1.3 ****/

        varchar v_caller_page[500];  /*** Ver 1.1 ***/
        i_foccur_count = 0;
        i_enc_len = 0;   /*** Ver 1.3 ***/
        l_buff_length = 600000;
        l_res_len = 0;

        FBFR32 * ptr_fml_Ibuffer; /*Input buffer*/
        FBFR32 * ptr_fml_Obuffer; /*Output buffer*/

        EXEC SQL INCLUDE "table/avm_aadhar_vault_master.h";
        EXEC SQL INCLUDE "table/iurd_info_uidai_rspons_dtls.h";  /** ver 1.5 **/

        ptr_fml_Ibuffer = (FBFR32 *)rqst->data;
        ptr_fml_Obuffer = (FBFR32 *)NULL;

        strcpy(c_ServiceName, rqst->name);
        INITDBGLVL(c_ServiceName);

        MEMSET(sql_avm_aadhar_no);
        MEMSET(sql_avm_aadhar_ref);
        MEMSET(sql_avm_input_src);
        MEMSET(v_caller_page);
        /**** Ver 1.3 ****/
        MEMSET(c_plain);
        MEMSET(c_decrypt);
        /**** Ver 1.3 ****/
        INIT(i_err_op,4);
        INIT(i_ferr,4);

        /*** userlog(" SVC_AADHAR_INSERT service started.");  commented in ver 1.3 ***/
        if (Fget32(ptr_fml_Ibuffer, FML_MSG_TYP, 0,&c_msg_typ, 0) == -1)
        {
                errlog(c_ServiceName, "S31005", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
        }

        /** userlog("SVC_AADHAR_VOLT called for c_msg_typ  %c  ", c_msg_typ); commented ** Ver 1.3 **/
        /**temp **/userlog("SVC_AADHAR_VOLT called for c_msg_typ  %c  ", c_msg_typ);

        /********** Ver 1.1 ***********/
        if (Fget32(ptr_fml_Ibuffer, FML_GMS_NM, 0,(char *)v_caller_page.arr, 0) == -1)
  {
                if(Ferror32 == FNOTPRES)
                {
                        userlog("Caller Page Not present");
                }
                else
                {
        errlog(c_ServiceName, "S31010", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
        Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                }
  }
        SETLEN(v_caller_page);
        userlog("SVC_AADHAR_VOLT Called from :%c: and :%s:",c_msg_typ,v_caller_page.arr);  /** Ver 1.3 **/
        /********** Ver 1.1 ***********/

        /********************* Output Buffer Allocation *********************************/
        ptr_fml_Obuffer = (FBFR32 * ) tpalloc("FML32", NULL, 10*MIN_FML_BUF_LEN);
        if (ptr_fml_Obuffer == NULL)
        {
          errlog(c_ServiceName, "S31015", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
          Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
        }
        /*******************************************************************************/

        if (c_msg_typ == 'S' || c_msg_typ == 'A') /** "A" condition added in ver 3.3 **/
        {
                i_err_op[0] = Fget32(ptr_fml_Ibuffer, FML_MDC_OPPACCCODE, 0, (char *)sql_avm_aadhar_no.arr, 0);
                i_err_op[1] = Fget32(ptr_fml_Ibuffer, FML_PARAM_CC, 0, (char *)sql_avm_input_src.arr, 0);

                for(i = 0; i < 2; i++)
                {
                        if(     i_err_op[i] == -1)
                        {
                                tpfree((char * ) ptr_fml_Obuffer);
                                userlog("Error in Fget for i = %d", i);
                                errlog(c_ServiceName, "S31020", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                        }
                }

                SETLEN(sql_avm_aadhar_no);
                SETLEN(sql_avm_input_src);

                /************* Ver 1.1 *************/
                if(sql_avm_aadhar_no.len != 12)
                {
                        tpfree((char * ) ptr_fml_Obuffer);
      errlog(c_ServiceName, "S31025", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                        strcpy(c_err_msg,"Aadhaar Number not valid");
      Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                }
                /************* Ver 1.1 *************/

                /**** Ver 1.4 moved here from below  ****/
    c_encrypt = (char*)malloc(20);
    if( encryption(sql_avm_aadhar_no.arr,c_encrypt,&i_enc_len) == -1)
    {
        free(c_encrypt);
      tpfree((char * ) ptr_fml_Obuffer);
      userlog("Error in encrypting data");
      errlog(c_ServiceName, "S31030", LIBMSG, DEF_USR, DEF_SSSN, c_err_msg);
      Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
    }
    MEMSET(v_encrypt_text);
    v_encrypt_text.len = i_enc_len;
    memcpy(v_encrypt_text.arr,c_encrypt,v_encrypt_text.len);

    /**** Ver 1.4 ****/

                EXEC SQL
                SELECT  AVM_AADHAR_REF
                INTO    :sql_avm_aadhar_ref
                FROM    AVM_AADHAR_VAULT_MASTER
                /**** WHERE   AVM_AADHAR_NO = :sql_avm_aadhar_no;  *** commented in ver 1.4 ***/
                WHERE   AVM_ENCRYPTED_AADHAR_NO = :v_encrypt_text;  /*** Ver 1.4 ***/

                if (SQLCODE != 0)
                {
                  /*
                   *    If aadhar number is not present in the uid_dtls table then,
                   *    key is generated for the aadhar number, and aadhar number
                   *    and key is inserted in the uid_dtls table.
                   */

                        if (SQLCODE == NO_DATA_FOUND)
                  {
                                userlog("UID_NO not found in UID_DTLS.");

                                /**** Ver 1.3 **** commented in ver 1.4 ********
                c_encrypt = (char*)malloc(20);
                if( encryption(sql_avm_aadhar_no.arr,c_encrypt,&i_enc_len) == -1)
                        {
                free(c_encrypt);
                tpfree((char * ) ptr_fml_Obuffer);
                userlog("Error in encrypting data");
                errlog(c_ServiceName, "S31035", LIBMSG, DEF_USR, DEF_SSSN, c_err_msg);
                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                }
                MEMSET(v_encrypt_text);
                v_encrypt_text.len = i_enc_len;
                memcpy(v_encrypt_text.arr,c_encrypt,v_encrypt_text.len);

                **** Ver 1.3 ****        Ver 1.4 comment ended ********/

                                if (tpbegin(TRAN_TIMEOUT, 0) == -1)
                                {
                                        free(c_encrypt);   /*** Ver 1.3 ***/
                                        tpfree((char * ) ptr_fml_Obuffer);
                                        errlog(c_ServiceName, "S31040", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                        Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                        tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                                }

                                EXEC SQL
                                        SELECT SYS_GUID()
                                  INTO   :sql_avm_aadhar_ref
                                  FROM   DUAL;

                                if (SQLCODE != 0)
                                {
                                        free(c_encrypt);   /*** Ver 1.3 ***/
                                  tpabort(0);
                                  errlog(c_ServiceName, "S31045", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                  Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                  tpfree((char * )ptr_fml_Obuffer);
                                  tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                                }

                                EXEC SQL
                                 INSERT INTO AVM_AADHAR_VAULT_MASTER
                                 (
                                                /*** AVM_AADHAR_NO,  commented in ver 1.4 ***/
                                                AVM_AADHAR_REF,
                                                AVM_INPUT_SRC,
                                                AVM_INSERT_DATE,
                                                AVM_ENCRYPTED_AADHAR_NO   /**** Ver 1.3 ****/
                                 )
                                 VALUES
                                 (
                                                /*** TRIM(:sql_avm_aadhar_no), ** Ver 1.2 added trim function to AVM_AADHAR_NO ** Ver 1.4 ***/
                                                :sql_avm_aadhar_ref,
                                                :sql_avm_input_src,
                                                SYSDATE,
                                                :v_encrypt_text     /**** Ver 1.3 ****/
                                 );

                                if (SQLCODE != 0)
                                {
                                        free(c_encrypt);   /*** Ver 1.3 ***/
                                        tpabort(0);
                                errlog(c_ServiceName, "S31050", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                tpfree((char * )ptr_fml_Obuffer);
                                tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                                }

                                /****** Ver 1.3 temporary patch **********/

                                EXEC SQL
                                        INSERT INTO EXCHANGE_PARAM_DTLS
                                        (
                                                EPD_NAME,
                                                EPD_VALUE
                                        )
                                        VALUES
                                        (
                                                :sql_avm_aadhar_ref,
                                                SUBSTR(TRIM(:sql_avm_aadhar_no),5,4)||SUBSTR(TRIM(:sql_avm_aadhar_no),9,4)||SUBSTR(TRIM(:sql_avm_aadhar_no),1,4)
                                        );

                                if (SQLCODE != 0)
        {
                                        free(c_encrypt);   /*** Ver 1.3 ***/
          tpabort(0);
          errlog(c_ServiceName, "S31055", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
          Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
          tpfree((char * )ptr_fml_Obuffer);
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }

                                free(c_encrypt);
                                /***** Ver 1.3 ******/

                                if (tpcommit(0) == -1)
                                {
                                tpabort(0);
                                errlog(c_ServiceName, "S31060", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                tpfree((char * ) ptr_fml_Obuffer);
                                tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                                }

                        }
                        else
                        {
                                errlog(c_ServiceName, "S31065", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                tpfree((char * ) ptr_fml_Obuffer);
                                tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                        }
                }

                if(Fadd32(ptr_fml_Obuffer, FML_TM, sql_avm_aadhar_ref.arr, 0) == -1)
        {
                        errlog(c_ServiceName, "S31070", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
        Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
        tpfree((char * ) ptr_fml_Obuffer);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
        }
        else if (c_msg_typ == 'G' || c_msg_typ == 'D')
        {
                i_foccur_count = Foccur32(ptr_fml_Ibuffer,FML_O_SYMBOL);

                for(i=0 ; i < i_foccur_count; i++)
                {
                        MEMSET(sql_avm_aadhar_ref);
                        MEMSET(sql_avm_aadhar_no);
                        MEMSET(c_plain);  /*** Ver 1.3 ***/
                        ind_encrypt_text = 0;

                        if (Fget32(ptr_fml_Ibuffer, FML_O_SYMBOL, i, (char *)sql_avm_aadhar_ref.arr, 0) == -1)
                        {
                                tpfree((char * ) ptr_fml_Obuffer);
                                userlog("IN fget of  sql_avm_aadhar_ref");
                                errlog(c_ServiceName, "S31075", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                                tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                        }

                        SETLEN(sql_avm_aadhar_ref);

                        /********** commented in ver 1.3 ******
                userlog("sql_avm_aadhar_ref %s ", sql_avm_aadhar_ref.arr);  *****/

                        MEMSET(v_encrypt_text);

                        EXEC SQL
                                SELECT /*** TRIM(AVM_AADHAR_NO),** Ver 1.2 added trim function to AVM_AADHAR_NO ** comment 1.4 **/
                                                         AVM_ENCRYPTED_AADHAR_NO                                                                /**** Ver 1.3 ****/
                                INTO   /*** :sql_avm_aadhar_no,       ** comment 1.4 **/
                                                         :v_encrypt_text:ind_encrypt_text        /**** Ver 1.3 ****/
                                FROM   AVM_AADHAR_VAULT_MASTER
                                WHERE  AVM_AADHAR_REF = :sql_avm_aadhar_ref;

                        /*** SETNULL(sql_avm_aadhar_no);    ver 1.4 commented ****/
                        SETNULL(v_encrypt_text);    /**** Ver 1.3 ****/

                        /********** commented in ver 1.3 ******
                        userlog("sql_avm_aadhar_no %s", sql_avm_aadhar_no.arr);  ****/

                        /************ commented in ver 1.3 **********
                        if (SQLCODE == NO_DATA_FOUND && c_msg_typ != 'D')
                        {
                           userlog("error in no data found");
                           errlog(c_ServiceName, "S31080", "NO data found for Ref no", DEF_USR, DEF_SSSN, c_err_msg);
                           Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                           tpfree((char * )ptr_fml_Obuffer);
                           tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                        }

                        if (SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
                        {
                           userlog("ERROR in sqlerr");
                           errlog(c_ServiceName, "S31085", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                           Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                           tpfree((char * )ptr_fml_Obuffer);
                           tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                        }
                        ******************  ver 1.3 comment ended ************/
                        /*****************  Ver 1.3  *************************/
                        if (SQLCODE != 0)
                        {
                                if(SQLCODE == NO_DATA_FOUND && c_msg_typ == 'D')
                                {
                                        userlog("No issue");
                                }
                                else
                                {
                errlog(c_ServiceName, "S31090", "NO data found for Ref no", DEF_USR, DEF_SSSN, c_err_msg);
                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                tpfree((char * )ptr_fml_Obuffer);
                tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
                                }
                        }
                        /*****************  Ver 1.3  *************************/

                        /**** Ver 1.3 ****/
                        /***********   if(v_encrypt_text.len != 0)  *********/
                        if(ind_encrypt_text != -1 && v_encrypt_text.len != 0)
                        {
                                MEMSET(c_plain);
                                c_encrypt = (char*)malloc(20);
                                memcpy(c_encrypt,v_encrypt_text.arr,v_encrypt_text.len);
                                if(decryption(c_encrypt,c_plain.arr,v_encrypt_text.len) == -1)
                                {
                                        free(c_encrypt);
                tpfree((char * ) ptr_fml_Obuffer);
                userlog("Error in encrypting data");
                errlog(c_ServiceName, "S31095", LIBMSG, DEF_USR, DEF_SSSN, c_err_msg);
                Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, 0L, (char *) ptr_fml_Ibuffer, 0L, 0);
                }
                                free(c_encrypt);
                        }
                        /**** Ver 1.3 ****/

                        /**** Ver 1.3 ***
                        if(Fadd32(ptr_fml_Obuffer, FML_MATCH_ACCOUNT_NO, sql_avm_aadhar_no.arr, 0) == -1) ***/
                        if(Fadd32(ptr_fml_Obuffer, FML_MATCH_ACCOUNT_NO, c_plain.arr, 0) == -1)    /*** Ver 1.3 ***/
        {
        errlog(c_ServiceName, "S31100", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
        Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
        tpfree((char * ) ptr_fml_Obuffer);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }

                }

        }
        if (c_msg_typ == 'A') /** ver 1.5  **/
        {
    c_msg_uidai_res = (char*)tpalloc("CARRAY", NULL, l_buff_length);

    if (c_msg_uidai_res == NULL)
    {
      userlog("Unable to c_msg_uidai_res");
                        errlog(c_ServiceName, "S31105", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
      tpreturn(TPFAIL, 0L, (char*)ptr_fml_Ibuffer, 0L, 0);
    }

    MEMSET(sql_iurd_api_nm);
    MEMSET(sql_iurd_aua_cd);
    MEMSET(sql_iurd_sub_aua_cd);
    MEMSET(sql_iurd_rqst_tm);

    i_err_op[0] = Fget32(ptr_fml_Ibuffer, FML_MDC_NARRATION, 0, (char*)sql_iurd_api_nm.arr, 0);
    i_err_op[1] = Fget32(ptr_fml_Ibuffer, FML_MDC_AMOUNT, 0, (char*)sql_iurd_aua_cd.arr, 0);
    i_err_op[2] = Fget32(ptr_fml_Ibuffer, FML_MDC_ISMARGIN, 0, (char*)sql_iurd_sub_aua_cd.arr, 0);
    i_err_op[3] = Fget32(ptr_fml_Ibuffer, FML_MDC_CRDT_NMBR, 0, (char*)sql_iurd_rqst_tm.arr, 0);
    i_err_op[4] = Fget32(ptr_fml_Ibuffer, FML_RBUF, 1, (char*)c_msg_uidai_res, 0);
    i_err_op[5] = Fget32(ptr_fml_Ibuffer, FML_RBUF_LEN, 1, (char*)&l_res_len, 0);
    i_err_op[6] = Fget32(ptr_fml_Ibuffer, FML_USR_ADDRSS_LN3, 0, (char*)sql_avm_aadhar_ref.arr, 0);

    for (i = 0; i < 7; i++)
    {
      if (i_err_op[i] == -1)
      {
        userlog("Fget32 failed at :%d:", i);
        tpfree(c_msg_uidai_res);
        tpreturn(TPFAIL, 0L, (char*)ptr_fml_Ibuffer, 0L, 0);
      }
    }

    userlog("l_res_len:%ld:", l_res_len);
    userlog("sql_iurd_api_nm :%s:", sql_iurd_api_nm.arr);
    userlog("sql_iurd_aua_cd :%s:", sql_iurd_aua_cd.arr);
    userlog("sql_iurd_sub_aua_cd :%s", sql_iurd_sub_aua_cd.arr);
    userlog("sql_iurd_rqst_tm :%s:", sql_iurd_rqst_tm.arr);
    userlog("sql_avm_aadhar_ref :%s:", sql_avm_aadhar_ref.arr);

                SETLEN(sql_iurd_api_nm);
                SETLEN(sql_iurd_aua_cd);
                SETLEN(sql_iurd_sub_aua_cd);
                SETLEN(sql_iurd_rqst_tm);
                SETLEN(sql_avm_aadhar_ref);

    userlog("Image Length Before :%ld:", strlen(c_msg_uidai_res));
    c_msg_uidai_res[l_res_len] = '\0';
    userlog("Image Length After :%ld:", strlen(c_msg_uidai_res));

    if (tpbegin(0, 0) == -1)
    {
                        errlog(c_ServiceName, "S31110", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
      tpfree(c_msg_uidai_res);
      Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char*)ptr_fml_Ibuffer, 0L, 0);
    }

    EXEC SQL
       INSERT INTO IURD_INFO_UIDAI_RSPONS_DTLS(IURD_INS_DT,
                IURD_SRC_TYP,
                IURD_RESPONSE,
                IURD_API_NM,
                IURD_AUA_CD,
                IURD_SUB_AUA_CD,
                IURD_RQST_TM,
                IURD_AADHAR_KEY)
       VALUES(
                SYSDATE,
                :sql_iurd_src_typ,
                :c_msg_uidai_res,
                :sql_iurd_api_nm,
                :sql_iurd_aua_cd,
                :sql_iurd_sub_aua_cd,
                TO_DATE(:sql_iurd_rqst_tm, 'DD-Mon-YYYY HH24:MI:SS'),
                :sql_avm_aadhar_ref);

    if (SQLCODE != 0)
    {
                        errlog(c_ServiceName, "S31115", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
      tpabort(0);
      tpfree(c_msg_uidai_res);
      Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char*)ptr_fml_Ibuffer, 0L, 0);
    }

    tpfree(c_msg_uidai_res);

    if (tpcommit(0) == -1)
    {
                        errlog(c_ServiceName, "S31120", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
      tpabort(0);
      Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char*)ptr_fml_Ibuffer, 0L, 0);
    }
        }  /** ver 1.5  **/

        userlog("Call to SVC_AADHAR_VOLT is successful");
        tpreturn(TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0L, 0);

}